name: Sync Fork All Branches

on:
  schedule:
    - cron: '0 0 * * *'  # 每天运行一次
  workflow_dispatch:      # 允许手动触发

jobs:
  sync:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.SYNC_PAT }}
          
      - name: Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
      - name: Sync with upstream
        run: |
          # 创建临时目录并保存当前的 sync-fork.yml
          mkdir -p temp_backup
          cp .github/workflows/sync-fork.yml temp_backup/
          
          # 添加上游仓库
          git remote add upstream https://github.com/nezhahq/nezha.git
          
          # 获取所有远程信息
          git fetch upstream --prune
          
          # 同步所有分支
          git branch -r | grep 'upstream/' | grep -v '\->' | while read -r remote; do
            branch="${remote#upstream/}"
            echo "Syncing branch $branch..."
            
            # 创建工作目录
            work_dir="work_${branch}"
            mkdir -p "$work_dir"
            
            # 使用 git worktree 检出分支到新目录
            git worktree add "$work_dir" "upstream/$branch"
            
            # 在工作目录中进行操作
            cd "$work_dir"
            
            # 确保目录存在并恢复 sync-fork.yml
            echo "Creating .github/workflows directory..."
            mkdir -p .github/workflows
            ls -la .github/
            echo "Copying sync-fork.yml from backup..."
            cp -v ../temp_backup/sync-fork.yml .github/workflows/
            
            # 重命名其他 yml 文件为 ymlbak（除了 sync-fork.yml）
            find .github/workflows/ -name "*.yml" ! -name "sync-fork.yml" -exec sh -c 'mv "$1" "${1}bak"' _ {} \;
            
            # 如果有改动，提交它们
            if [ -n "$(git status --porcelain .github/workflows/)" ]; then
              git add .github/workflows/
              git commit -m "Rename workflow files to ymlbak (except sync-fork.yml)"
              git push -f origin "HEAD:$branch"
            else
              echo "No changes in workflows, skipping commit and push"
            fi
            
            # 返回主目录并清理
            cd ..
            git worktree remove "$work_dir"
          done
          
          # 清理临时目录
          rm -rf temp_backup

  # 新增推送到 GitLab 的任务
  push-to-gitlab:
    needs: sync
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # 获取所有分支和历史
          
      - name: Push to GitLab
        env:
          GITLAB_TOKEN: ${{ secrets.GITLAB_TOKEN }}  # GitLab 访问令牌
        run: |-
          git remote add gitlab "http://oauth2:${GITLAB_TOKEN}@mr.pxwang.cn:5080/pxwang/nezha.git"
          git fetch --all
          git push gitlab --all --force 
